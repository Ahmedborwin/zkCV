{
  "version": 3,
  "sources": ["../../@particle-network/rainbowkit-ext/src/utils/titleCase.ts", "../../@particle-network/rainbowkit-ext/src/particleWallet/particleConnector.ts", "../../@particle-network/rainbowkit-ext/src/particleWallet/particleWallet.ts"],
  "sourcesContent": ["export function titleCase(str?: string): string {\n    if (!str) {\n        return '';\n    }\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.slice(1).toLowerCase();\n    });\n}\n", "import type { AuthType } from '@particle-network/auth';\nimport type { ParticleProvider } from '@particle-network/provider';\nimport type { Chain } from '@rainbow-me/rainbowkit';\nimport { Address, ChainNotConfiguredError, Connector, ConnectorData, ConnectorNotFoundError } from 'wagmi';\n\nimport { SwitchChainError, UserRejectedRequestError, createWalletClient, custom, getAddress } from 'viem';\n\ntype ParticleAuth = ConstructorParameters<typeof ParticleProvider>[0];\n\ntype ParticleOptions = {\n    auth?: ParticleAuth;\n    authType?: AuthType;\n};\nexport class ParticleConnector extends Connector<ParticleProvider, ParticleOptions> {\n    readonly id = 'particle';\n    readonly name = 'Particle';\n    readonly ready = true;\n\n    private provider?: ParticleProvider;\n\n    async connect({ chainId }: { chainId?: number } = {}): Promise<Required<ConnectorData>> {\n        if (!this.options.auth) {\n            throw new Error('Please init Particle first');\n        }\n        try {\n            const provider = await this.getProvider();\n            provider.on('accountsChanged', this.onAccountsChanged);\n            provider.on('chainChanged', this.onChainChanged);\n            provider.on('disconnect', this.onDisconnect);\n\n            this.emit('message', { type: 'connecting' });\n\n            if (!this.options.auth.isLogin()) {\n                await this.options.auth.login({\n                    preferredAuthType: this.options.authType,\n                });\n            }\n\n            let id = await this.getChainId();\n            let unsupported = this.isChainUnsupported(id);\n\n            if (chainId && id !== chainId) {\n                const chain = await this.switchChain(chainId);\n                id = chain.id;\n                unsupported = this.isChainUnsupported(id);\n            }\n\n            const account = await this.getAccount();\n\n            return {\n                account,\n                chain: { id, unsupported },\n            };\n        } catch (error: any) {\n            if (error.code === 4001) {\n                throw new UserRejectedRequestError(error);\n            }\n            throw error;\n        }\n    }\n\n    async disconnect() {\n        const provider = await this.getProvider();\n        await provider.disconnect();\n\n        provider.removeListener('accountsChanged', this.onAccountsChanged);\n        provider.removeListener('chainChanged', this.onChainChanged);\n        provider.removeListener('disconnect', this.onDisconnect);\n    }\n\n    async getAccount(): Promise<Address> {\n        const provider = await this.getProvider();\n        const accounts = await provider.request({ method: 'eth_accounts' });\n        // return checksum address\n        return getAddress(accounts[0]);\n    }\n\n    async getChainId(): Promise<number> {\n        const provider = await this.getProvider();\n        const chainId = await provider.request({ method: 'eth_chainId' });\n        return Number(chainId);\n    }\n\n    async getProvider(): Promise<ParticleProvider> {\n        if (!this.options.auth) {\n            throw new Error('Please init Particle first');\n        }\n        if (!this.provider) {\n            const { ParticleProvider } = await import('@particle-network/provider');\n            this.provider = new ParticleProvider(this.options.auth);\n        }\n        return this.provider;\n    }\n\n    async getWalletClient({ chainId }: { chainId?: number } = {}) {\n        const [provider, account] = await Promise.all([this.getProvider(), this.getAccount()]);\n        const chain = this.chains.find((x) => x.id === chainId);\n        if (!provider) throw new Error('provider is required.');\n        return createWalletClient({\n            account,\n            chain,\n            transport: custom(provider),\n        });\n    }\n\n    async isAuthorized(): Promise<boolean> {\n        if (!this.options.auth) {\n            throw new Error('Please init Particle first');\n        }\n        return this.options.auth.isLogin() && this.options.auth.walletExist();\n    }\n\n    async switchChain(chainId: number): Promise<Chain> {\n        const provider = await this.getProvider();\n        if (!provider) throw new ConnectorNotFoundError();\n        const id = `0x${chainId.toString(16)}`;\n        try {\n            await provider.request({\n                method: 'wallet_switchEthereumChain',\n                params: [{ chainId: id }],\n            });\n            return (\n                this.chains.find((x) => x.id === chainId) ?? {\n                    id: chainId,\n                    name: `Chain ${id}`,\n                    network: `${id}`,\n                    nativeCurrency: { name: 'Ether', decimals: 18, symbol: 'ETH' },\n                    rpcUrls: { default: { http: [''] }, public: { http: [''] } },\n                }\n            );\n        } catch (error) {\n            const chain = this.chains.find((x) => x.id === chainId);\n            if (!chain) throw new ChainNotConfiguredError({ chainId, connectorId: this.id });\n\n            throw new SwitchChainError(error as Error);\n        }\n    }\n\n    protected onAccountsChanged = (accounts: string[]) => {\n        if (accounts.length === 0) this.emit('disconnect');\n        else this.emit('change', { account: getAddress(accounts[0] as string) });\n    };\n\n    protected onChainChanged = (chainId: number | string) => {\n        const id = Number(chainId);\n        const unsupported = this.isChainUnsupported(id);\n        this.emit('change', { chain: { id, unsupported } });\n    };\n\n    protected onDisconnect = () => {\n        this.emit('disconnect');\n    };\n}\n", "import type { AuthType } from '@particle-network/auth';\nimport type { Chain, Wallet } from '@rainbow-me/rainbowkit';\nimport { titleCase } from '../utils/titleCase';\nimport { ParticleConnector } from './particleConnector';\n\nexport interface ParticleWalletOptions {\n    chains: Chain[];\n    authType?: Exclude<AuthType, 'jwt'>;\n}\n\nexport const particleWallet = ({ chains, authType }: ParticleWalletOptions): Wallet => ({\n    id: authType ? `particle${authType}` : 'particle',\n    name: authType ? titleCase(authType) : 'Particle',\n    iconUrl: async () => {\n        const icons = await import('./icons');\n        return authType ? icons[authType] : icons.particle;\n    },\n    iconBackground: authType ? '#ffffff' : '#d61ace',\n    installed: typeof window !== 'undefined',\n    createConnector: () => {\n        const connector = new ParticleConnector({\n            chains: chains,\n            options: {\n                auth: typeof window === 'undefined' ? undefined : window.particle?.auth,\n                authType: authType,\n            },\n        });\n\n        return {\n            connector,\n        };\n    },\n});\n"],
  "mappings": "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",
  "names": []
}
